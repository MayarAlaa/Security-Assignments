#include <iostream>
#include <string>

using namespace std;
int main()
{
	string matrix[5][5];
	string keyword;
	cin >> keyword;
	int key_length;
	key_length= keyword.length();
	string alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
	int alpha_size = alphabet.length();
	string text; //PLAIN TEXT
	cin >> text;
	int text_length = text.length();
	string text_mat[1000];
	

	
	//erase the repeated character in the key
	for (int i = 0; i<key_length; i++) {

		
			if (keyword[i] == keyword[i+1])
			{
				keyword.erase(i+1, 1);
				key_length--;
				// cout<<keyword;
			}
		
	}

	//erase the letters of the keyword from the alphabets to avoid repitition of letters
	for (int i = 0; i<key_length; i++) {

		for (int j = 0; j< alpha_size; j++)
		{
			if (keyword[i] == alphabet[j])
			{
				alphabet.erase(j, 1);
				alpha_size--;
				// cout<<alphabet;
			}
		}
	}
	//concatenate the keyword and the alphabet in one string called str2
	string str2;
	str2 = keyword + alphabet;

	//filling the matrix with str2
	int k = 0;

	for (unsigned int i = 0; i<5; i++) {

		for (int j = 0; j<5; j++, k++)
		{
			matrix[i][j] = str2[k];
			//cout << matrix[i][j] << " ";

		}
		//cout << endl;

	}
	//handling repeated character in the text 
	//BA LX LO ON
		for (int i = 0; i<text_length; i+=2) {

		if (text[i]=='X' && text[i+1] == 'X') {
			text.insert(i + 1, 1, 'V');
			text_length++;
			//cout << text_length << endl;
			// cout<<text<<endl;
		//	if (text_length % 2 == 0)
			//	break;
		}
		else if (text[i] == text[i + 1])
		{
			text.insert(i+1,1,'X');
			text_length++;
			//cout << text_length << endl;
			// cout<<text<<endl;
			if (text_length % 2 == 0)
				break;
		}
		
		

	}

	
	//handling odd length of the text
	if (text_length % 2 != 0)
	{
		
		if(text.at(text_length-1)=='X'){
			text = text + 'V';
		}
		else
		
        text = text + 'X';
		//cout << text << endl;
		text_length++;
		//cout << text_length << endl;
	}
	
	//create an array for the text 
	
	for (int i = 0; i<text_length; i++)
	{
		text_mat[i] = text[i];
		
    }

	int row1 = 0; int row2 = 0; int col1 = 0; int col2 = 0;
	for (int k = 0; k<text_length; k += 2)   //to loop over 2 letters by 2 letters
	{
		//we want to store the index of a given letter
		for (int r = 0; r<5; r++)
		{
			for (int c = 0; c<5; c++)
			{
				if (text_mat[k] == matrix[r][c])
				{
					row1 = r;
					col1 = c;
					break;
				}

			}

		}
		for (int r = 0; r<5; r++)
		{
			for (int c = 0; c<5; c++)
			{
				if (text_mat[k + 1] == matrix[r][c])
				{
					row2 = r;
					col2 = c;
					break;

				}
			}

		}
		//handling case of same row
		if (row1 == row2)
		{
			if ( col2 == 4 )   //if the 2nd letter is at the last col , revolve
			{
				cout << matrix[row1][col1 + 1] << matrix[row2][0];
			}
			else if (col1 == 4) //if the 1st letter is at last col ,revolve
			{
				cout << matrix[row1][0] << matrix[row2][col2 + 1];
			}
			else
			cout << matrix[row1][col1+1] << matrix[row2][col2+1];
		}
		//handling case of same col
		else if (col1 == col2)
		{
			if (row2 == 4)  //if the 2nd letter is at the last row , revolve
			{
				cout << matrix[row1 + 1][col1] << matrix[0][col2];
			}
			else if (row1 == 4) //if the 1st letter is at last row ,revolve
			{
				cout << matrix[0][col1] << matrix[row2+1][col2];
			}
		else
			cout << matrix[row1+1][col1] << matrix[row2+1][col2];
		}
		else
		cout << matrix[row1][col2] << matrix[row2][col1];

	}
	cout << endl;
	//system("pause");
	return 0;
}

