#include <iostream>
#include <string>
#include <iomanip>
//#include <ostream>
#include <sstream>
#include <bitset>

using namespace std;


int count_ones(string x)
{
	int count = 0;
	for (int i = 0; i < 8; i++)
	{
		if (x[i] == '1')
		{
			count++;
		}
	}
	return count;

}

int * get_orders(string poly) //function to return array of integers
{
	static int  r[8];
	//int r[8] ;
	int k = 0;
	for (int i = 0; i <8; i++)
	{
		//	cout << poly[i] <<"*POLY*";
		if (poly[i] == '1')
		{
			r[k] = 7 - i;

			//	cout << *(r+k) <<"&ordersssssss&"<< endl;
			k++;
		}


	}
	return r;

}
std::string bitxor(std::string x, std::string y)
{
	std::stringstream ss;

	// works properly only if they have same length!
	for (int i = 0; i < x.length(); i++)
	{

		ss << (x.at(i) ^ y.at(i));
	}


	return ss.str();
}

string* shift_poly(string x, int y) {  //function to return array of strings

	static string x_func[8];
	x_func[0] = x;
	for (int i = 1; i <= y; i++)  // counter 
	{
		int k = x[0];

		for (int j = 0; j < 8; j++) // dah hy3ddy 3la bit bit
		{
			if (j == 7)
			{
				x[j] = '0';
			}
			else
			{
				x[j] = x[j + 1];
			}
		}
		if (k == '1')
		{
			x = bitxor(x, "00011011");

		}


		x_func[i] = x;
		//cout << endl << x_func[i] << "%%%" << endl;

	}

	return x_func;


}

//function to transform from binary to HEX
char getHexCharacter(std::string str)
{
	if (str.compare("1111") == 0) return 'F';
	else if (str.compare("1110") == 0) return 'E';
	else if (str.compare("1101") == 0) return 'D';
	else if (str.compare("1100") == 0) return 'C';
	else if (str.compare("1011") == 0) return 'B';
	else if (str.compare("1010") == 0) return 'A';
	else if (str.compare("1001") == 0) return '9';
	else if (str.compare("1000") == 0) return '8';
	else if (str.compare("0111") == 0) return '7';
	else if (str.compare("0110") == 0) return '6';
	else if (str.compare("0101") == 0) return '5';
	else if (str.compare("0100") == 0) return '4';
	else if (str.compare("0011") == 0) return '3';
	else if (str.compare("0010") == 0) return '2';
	else if (str.compare("0001") == 0) return '1';
	else if (str.compare("0000") == 0) return '0';

}
int main()
{
	string x, y;

	cin >> x >> y;
	string input[2] = { x,y };
	string input_binary[2];

	for (int i = 0; i < 2; i++) {
		stringstream ss;
		ss << hex << input[i];
		unsigned n;
		ss >> n;
		bitset<8> b(n);
		input_binary[i] = b.to_string();
		//	cout << input_binary[i] << endl;
	}


	auto result = std::bitset<8>(input_binary[0]) ^ std::bitset<8>(input_binary[1]);
	//	std::cout << result << std::endl;

	stringstream res;
	res << hex << uppercase << std::setfill('0') << setw(2) << result.to_ulong();
	cout << res.str() << " ";

	//we need to get the order of each polynomial first
	x = input_binary[0];
	y = input_binary[1];
	//call function to count number of ones
	int count1 = count_ones(x);
	int count2 = count_ones(y);
//	cout << "count1 =" << count1 << endl;
//	cout << "count2 =" << count2 << endl;


	//call function get order
	int * orderss_1;
	int orders_1[8];

	orderss_1 = get_orders(x);

	for (int i = 0; i < count1; i++)
	{
		orders_1[i] = *(orderss_1 + i);
	}

	int * orderss_2;
	int orders_2[8];

	orderss_2 = get_orders(y);
	for (int i = 0; i < count2; i++)
	{
		orders_2[i] = *(orderss_2 + i);
	}


	string final_output;

	//cout << orders_1[0] << "highest order" << endl;
	//	if (*(orders_1 + 0) >= *(orders_2 + 0)) 
	if (orders_1[0] >= orders_2[0])
	{
		//call shift function and do it on *( orders_2 + 0) number of times = *( orders_1 + 0)
		//string* f = shift_poly(y, *(orders_1 + 0));
		string* f = shift_poly(y, orders_1[0]);
	/*	////////////////////////////////////////
		for (int i = 0; i < orders_1[0]; i++)
		{
			cout << *(f + i) << "  **" << endl;
		}
		//////////////////////////////////////
		*/


		// xor only orders_2  masln lw 7,5,2,1
		//yb2a na5od f[7] xor f[5] xor f[2] xor f[1] and so on
		// f[7] = *(f + 7)
		// 7 === *(orders_2 + 0)
		// final_output = *(f + *(orders_2 + 0));
	//	cout << orders_2[0] << endl;
		final_output = *(f + (orders_1[0]));
	//	cout << "output " << final_output << endl;

		for (int o = 1; o<count1; o++) {
			// final_output = bitxor(final_output, *(f + *(orders_2 + o)));
			final_output = bitxor(final_output, *(f + (orders_1[o])));
		//	cout << "F " << o << ":" << *(f + orders_1[o]) << endl;
		//	cout << "output " << final_output << endl;


		}

	}

	else
	{
		//string* f = shift_poly(x, *(orders_2 + 0));
		string* f = shift_poly(x, orders_2[0]);
			/*	////////////////////////////////////////
		for (int i = 0; i < count1; i++)
		{
			cout << *(f + i) << "  **" << endl;
		}
		//////////////////////////////////////
				*/

		//	 final_output = *(f + *(orders_1 + 0));
		final_output = *(f + orders_2[0]);
		
	//	cout << "output " << final_output<<endl;
		for (int o = 1; o<count2; o++) {
			final_output = bitxor(final_output, *(f + orders_2[o]));

	//	cout << "output " << final_output<<endl;

		}
	}




	/*for (int i = 0; i < count1 ; i++)
	{
	cout <<*( orders_1 + i) <<"**"<< endl;
	}
	*/

	//cout << final_output;
	string final1 = final_output.substr(0, 4);
	string final2 = final_output.substr(4, 7);
	//cout <<endl<< final1<<endl;
	//cout << final2<<endl;
	char final11 = getHexCharacter(final1);
	char final12 = getHexCharacter(final2);
	cout << final11 << final12;




     return 0;

		//system("pause");
}
