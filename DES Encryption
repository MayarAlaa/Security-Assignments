#include <iostream>
#include <string>
#include <iomanip>
//#include <ostream>
#include <sstream>
#include <bitset>

using namespace std;


char getHexCharacter(std::string str)
{
	if (str.compare("1111") == 0) return 'F';
	else if (str.compare("1110") == 0) return 'E';
	else if (str.compare("1101") == 0) return 'D';
	else if (str.compare("1100") == 0) return 'C';
	else if (str.compare("1011") == 0) return 'B';
	else if (str.compare("1010") == 0) return 'A';
	else if (str.compare("1001") == 0) return '9';
	else if (str.compare("1000") == 0) return '8';
	else if (str.compare("0111") == 0) return '7';
	else if (str.compare("0110") == 0) return '6';
	else if (str.compare("0101") == 0) return '5';
	else if (str.compare("0100") == 0) return '4';
	else if (str.compare("0011") == 0) return '3';
	else if (str.compare("0010") == 0) return '2';
	else if (str.compare("0001") == 0) return '1';
	else if (str.compare("0000") == 0) return '0';

}

string Hex_Binary(string input)
{
	string str;
	for (int o = 0; o<16; o++)
	{
		char s = input[o];
		stringstream ss;
		ss << hex << s;
		unsigned n;
		ss >> n;  // n is where we store the hex representation da elli fahmah , not 100% sure 
		bitset<4> b(n);
		str = str + b.to_string();  // str is the binary rep of the 16-Hex char of the input --> 64 bit

	}
	return str;

}



int main()
{
	string input;
	string key;
	int N;
	int index;     //TEMPORARY VARIABLE
	string str3;   //TEMPORARY VARIABLE
//	string out_xor_1; //output of xoring right and the left ---> 32-bit

	cin >> key;
	cin >> input;
	cin >> N;

	int  perm_box[64] ={ 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 
		12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 
		8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 
		19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7 };


int	Inv_Perm [64] = { 40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 
		6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
		34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25 };

	int exp_box[48] = { 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13,
		12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 
		25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1 };

	int PC1[56] = { 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 
		59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23,15, 7, 62, 54, 46,
		38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 };

	int PC2[48] = { 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 
		12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47,
		55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 };

	int Rotations[16] = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };

	int P_box[32] = { 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 
		31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25 };

	//transform hex to binary for the input
	string str_input;
	str_input = Hex_Binary(input);   //64-bit

//	cout << "transform hex to binary for the input : " << str_input << "  " << str_input.size() << endl;

	//transform hex to binary for the key
	string str_key;
	str_key = Hex_Binary(key);   //64-bit

//	cout << "transform hex to binary for the key : " << str_key << " " << str_key.size() << endl;
	for (int NN =0 ;NN <N ;NN ++)
	{

	

	//INITIAL PERMUTATION
	//first we need to know the order in the perm table
	//second we get the str[index in the str which is equal to that order-1] because the str starts from 0 not 1

	string str_64; //OUTPUT OF INITIAL PERM

 
	for (int i = 0; i < 64; i++)
	{

		index = perm_box[i];
		str3 = str_input[index - 1];
		str_64 += str3;


	}

//	cout << "OUTPUT OF INITIAL PERM : " << str_64 << "  " << str_64.size() << endl;

	//apply contraction perm on the key 
	string key_56; //output of PC1 for the key

	for (int i = 0; i < 56; i++)
	{
			index = PC1[i];
			str3 = str_key[index - 1];
			key_56 += str3;

	}
//	cout << "output of PC1 for the key : " << key_56 << " " << key_56.size() << endl;


	// SPLIT the 64-bit input INTO 32 AND 32

	string left = str_64.substr(0, 32);
//	cout << "left " << left << " " << left.size() << endl;
	string right = str_64.substr(32, 63);
//	cout << "Right " << right << " " << right.size() << endl;

	for (int round = 0; round < 16; round++)

	{
		


	//	cout << "round number " << round << endl;

		//the round is done on the right bits 

		// step 1 : Expansion box
		string right_48;

		//here we get the 48-bit output from the expansion box
		for (int i = 0; i < 48; i++)
		{
			
				index = exp_box[i];
				str3 = right[index - 1];
				right_48 = right_48 + str3;

		}
//		cout << "48-bit output from the expansion box : " << right_48 << "  " << right_48.size() << endl;

		//generate the key


		string left_key = key_56.substr(0, 28);
		string right_key = key_56.substr(28, 55);
		//	cout << left.length() << endl;
		//cout << right.length() << endl;

		//	cout << "left = " << left << endl ;
		//	cout << "right = " << right << endl;

		for (int rot = 0; rot < Rotations[round]; rot++)
		{
			char first_left = left_key[0];
			char first_right = right_key[0];
			for (int s = 1; s < 28; s++)
			{
				left_key[s - 1] = left_key[s];
				//cout << "s = " << s <<endl;
				right_key[s - 1] = right_key[s];
				//cout << "s = " << s<<endl;
			}
			left_key[27] = first_left;

			right_key[27] = first_right;
			//cout << "rotation" << Rotations[round];
			//cout << "left = " << left << endl;
			//cout << "right = " << right << endl;

		}
		//we should combine the left and right again
		key_56 = left_key + right_key;
		//cout << left.length() << endl;
		//cout << right.length() << endl;

		//cout << "left + right = " << str2 << endl ;
		//cout << str2.length() << endl;
		// str2 will go to 2 paths to next round and to PC2 


		// APPLY PC2 ON KEY TO GET THE 48-BIT KEY

		string key_48;   // OUTPUT OF PC2 ON THE KEY 
		for (int i = 0; i < 48; i++)
		{
			
				index = PC2[i];
				str3 = key_56[index - 1];
				key_48 += str3;

			

		}
//		cout << "key_48  " << key_48 << " " << key_48.size() << endl;
		/*
		//////////////////////////////////////////////////////////////////////////////
		int herooo = 0; //to loop over the string ,I'm calling it hero because it saved me <3
					   //loop over each 4 chars and transferring it to HEX
		for (int i = 0; i < 12; i++)
		{
			string sub_finalll;
			for (int j = 0; j<4; j++)
			{
				sub_finalll = sub_finalll + key_48[herooo];
				herooo++;
			}
			//cout << "subfinal " << sub_final << endl;
			char hex_charrr = getHexCharacter(sub_finalll);
			cout << hex_charrr ;
		}
		cout << endl;
		//////////////////////////////////////////////////////////////////
		*/





		//XOR with key

		//XOR 48 bit with 48 bit
		char out_xor_arr[48];
		string out_xor; //output of xoring key and the input

		for (int i = 0; i < 48; i++)
		{
			out_xor_arr[i] = (right_48[i] != key_48[i] ? '1' : '0');
			out_xor = out_xor + out_xor_arr[i];
		}

	//	cout << "output of xoring key and the input " << out_xor << " " << out_xor.size() << endl;

		//S-box


		int s[32][16] = { { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 },
		{ 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8
		},{ 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 },
		{ 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 } ,
		{ 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 },
		{ 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 },
		{ 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 },
		{ 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 },
		{ 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 },
		{ 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 },
		{ 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 },
		{ 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 },
		{ 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 },
		{ 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 },
		{ 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 },
		{ 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 },
		{ 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 },
		{ 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 },
		{ 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 },
		{ 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 },
		{ 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 },
		{ 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 },
		{ 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 },
		{ 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 },
		{ 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 },
		{ 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 },
		{ 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 },
		{ 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 },
		{ 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 },
		{ 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },
		{ 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },
		{ 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } };

		int K = 0;  //because all S-boxes are merged in one box
		string out_SBox;  //OUTPUT OF THE S-BOX
		for (int i = 0; i < 48; i += 6)
		{
			string row;
			string col;
			row = out_xor.substr(i, 1) + out_xor.substr(i + 5, 1);

			col = out_xor.substr(i + 1, 1) + out_xor.substr(i + 2, 1) + out_xor.substr(i + 3, 1) + out_xor.substr(i + 4, 1);

			//convert from binary to decimal
			unsigned long dec_row = std::bitset<2>(row).to_ulong();
			unsigned long dec_col = std::bitset<4>(col).to_ulong();
			int target = s[dec_row + K][dec_col];
	//		cout << "target  " << target << endl;
			//from decimal to binary
			std::string binary = std::bitset<4>(target).to_string();
			out_SBox = out_SBox + binary;

			K = K + 4;
		}
//		cout << "Sbox 32 : " << out_SBox << " " << out_SBox.size() << endl;

		//Permutation
		string perm_out; // 32-bit output of the last perm. box


		for (int i = 0; i < 32; i++)
		{
				index = P_box[i];
				str3 = out_SBox[index - 1];
				perm_out = perm_out + str3;

		}
	//	cout << "32-bit output of the last perm. box" << perm_out << " " << perm_out.size() << endl;

		//XOR with the left
		char out_xor_arr_1[32];

		//out_xor_1 = " ";
		string out_xor_1; //output of xoring right and the left ---> 32-bit
		for (int i = 0; i < 32; i++)
		{
			out_xor_arr_1[i] = (perm_out[i] != left[i] ? '1' : '0');
			out_xor_1 = out_xor_1 + out_xor_arr_1[i]; //right
		}

//		cout << "xor " << out_xor_1 << " " << out_xor_1.size() << endl;

		left = right;
		right = out_xor_1;
		//	cout << N << endl;
		if (round == 15)
		{
			//swap left and right again

			string temp;
			temp = left;
			left = right;
			right = temp;


		}
		/*
///////////////////////////////////////////////////////
		string out = left + right;
		
		int heroo = 0; //to loop over the string ,I'm calling it hero because it saved me <3
					  //loop over each 4 chars and transferring it to HEX
		for (int i = 0; i < 16; i++)
		{
			string sub_finall;
			for (int j = 0; j<4; j++)
			{
				sub_finall = sub_finall + out[heroo];
				heroo++;
			}
			//cout << "subfinal " << sub_final << endl;
			char hex_charr = getHexCharacter(sub_finall);
			cout << hex_charr ;
		}
		cout << endl;
		//////////////////////////////////////////////////////////////////
		*/

	}
	//stick the splitted
	string output;

	output = left + right; //64 bit
//	cout << "stick the splitted " << output << "  " << output.size() << endl;

//	str_input = output;

	//inverse permutation 
	string inv_out;

	for (int i = 0; i < 64; i++)
	{

		index = Inv_Perm[i];
		str3 = output[index - 1];
		inv_out += str3;


	}
	str_input = inv_out;


}
	

	//output in HEX


	int hero = 0; //to loop over the string ,I'm calling it hero because it saved me <3
				  //loop over each 4 chars and transferring it to HEX
	for (int i = 0; i < 16; i++)
	{
		string sub_final;
		for (int j = 0; j<4; j++)
		{
			sub_final = sub_final + str_input[hero];
			hero++;
		}
		//cout << "subfinal " << sub_final << endl;
		char hex_char = getHexCharacter(sub_final);
		cout << hex_char;
	}
	cout << endl;

	system("pause");
}

